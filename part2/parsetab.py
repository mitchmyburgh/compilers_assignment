
# /home/mitch/Documents/compiler_ass/src/part2/parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = 'A289ADD6F8AAF513BD2C528618703F0B'
    
_lr_action_items = {'(':([6,8,15,16,17,18,],[8,8,8,8,8,8,]),'FLOAT_LITERAL':([6,8,15,16,17,18,],[11,11,11,11,11,11,]),'&':([9,10,11,13,19,20,21,22,23,],[-14,-11,-13,18,-12,18,18,-9,-10,]),'ID':([0,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,],[2,2,-4,9,-3,9,-14,-11,-13,-5,-8,9,9,9,9,-12,-6,-7,-9,-10,]),'$end':([1,3,4,5,7,9,10,11,12,13,19,20,21,22,23,],[0,-2,-4,-1,-3,-14,-11,-13,-5,-8,-12,-6,-7,-9,-10,]),'@':([9,10,11,12,13,14,19,20,21,22,23,],[-14,-11,-13,15,-8,15,-12,-6,-7,-9,-10,]),')':([9,10,11,13,14,19,20,21,22,23,],[-14,-11,-13,-8,19,-12,-6,-7,-9,-10,]),'=':([2,],[6,]),'$':([9,10,11,12,13,14,19,20,21,22,23,],[-14,-11,-13,16,-8,16,-12,-6,-7,-9,-10,]),'#':([9,10,11,13,19,20,21,22,23,],[-14,-11,-13,17,-12,17,17,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Start':([0,],[1,]),'expression':([6,8,],[12,14,]),'Statements':([0,],[3,]),'factor':([6,8,15,16,17,18,],[10,10,10,10,22,23,]),'term':([6,8,15,16,],[13,13,20,21,]),'Statement':([0,3,],[4,7,]),'Program':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Start","S'",1,None,None,None),
  ('Start -> Program','Start',1,'p_start','parse_ula.py',11),
  ('Program -> Statements','Program',1,'p_program_statements','parse_ula.py',16),
  ('Statements -> Statements Statement','Statements',2,'p_statements','parse_ula.py',21),
  ('Statements -> Statement','Statements',1,'p_statements','parse_ula.py',22),
  ('Statement -> ID = expression','Statement',3,'p_statement','parse_ula.py',30),
  ('expression -> expression @ term','expression',3,'p_expression_plus','parse_ula.py',35),
  ('expression -> expression $ term','expression',3,'p_expression_minus','parse_ula.py',40),
  ('expression -> term','expression',1,'p_expression_term','parse_ula.py',45),
  ('term -> term # factor','term',3,'p_term_multiply','parse_ula.py',50),
  ('term -> term & factor','term',3,'p_term_divide','parse_ula.py',55),
  ('term -> factor','term',1,'p_term_factor','parse_ula.py',60),
  ('factor -> ( expression )','factor',3,'p_factor_expression','parse_ula.py',65),
  ('factor -> FLOAT_LITERAL','factor',1,'p_factor_float','parse_ula.py',70),
  ('factor -> ID','factor',1,'p_factor_id','parse_ula.py',75),
]
