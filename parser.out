Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     statement -> statement statement
Rule 3     statement -> ID = expression
Rule 4     expression -> expression @ expression
Rule 5     expression -> expression $ expression
Rule 6     expression -> term
Rule 7     term -> term # factor
Rule 8     term -> term & factor
Rule 9     term -> factor
Rule 10    factor -> ( expression )
Rule 11    factor -> FLOAT_LITERAL
Rule 12    factor -> ID

Terminals, with rules where they appear

#                    : 7
$                    : 5
&                    : 8
(                    : 10
)                    : 10
=                    : 3
@                    : 4
COMMENT              : 
FLOAT_LITERAL        : 11
ID                   : 3 12
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

expression           : 3 4 4 5 5 10
factor               : 7 8 9
program              : 0
statement            : 1 2 2
term                 : 6 7 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) statement -> . statement statement
    (3) statement -> . ID = expression

    ID              shift and go to state 1

    program                        shift and go to state 2
    statement                      shift and go to state 3

state 1

    (3) statement -> ID . = expression

    =               shift and go to state 4


state 2

    (0) S' -> program .



state 3

    (1) program -> statement .
    (2) statement -> statement . statement
    (2) statement -> . statement statement
    (3) statement -> . ID = expression

    $end            reduce using rule 1 (program -> statement .)
    ID              shift and go to state 1

    statement                      shift and go to state 5

state 4

    (3) statement -> ID = . expression
    (4) expression -> . expression @ expression
    (5) expression -> . expression $ expression
    (6) expression -> . term
    (7) term -> . term # factor
    (8) term -> . term & factor
    (9) term -> . factor
    (10) factor -> . ( expression )
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    (               shift and go to state 9
    FLOAT_LITERAL   shift and go to state 10
    ID              shift and go to state 7

    factor                         shift and go to state 11
    expression                     shift and go to state 8
    term                           shift and go to state 6

state 5

    (2) statement -> statement statement .
    (2) statement -> statement . statement
    (2) statement -> . statement statement
    (3) statement -> . ID = expression

  ! shift/reduce conflict for ID resolved as shift
    $end            reduce using rule 2 (statement -> statement statement .)
    ID              shift and go to state 1

  ! ID              [ reduce using rule 2 (statement -> statement statement .) ]

    statement                      shift and go to state 5

state 6

    (6) expression -> term .
    (7) term -> term . # factor
    (8) term -> term . & factor

    @               reduce using rule 6 (expression -> term .)
    $               reduce using rule 6 (expression -> term .)
    ID              reduce using rule 6 (expression -> term .)
    $end            reduce using rule 6 (expression -> term .)
    )               reduce using rule 6 (expression -> term .)
    #               shift and go to state 13
    &               shift and go to state 12


state 7

    (12) factor -> ID .

    #               reduce using rule 12 (factor -> ID .)
    &               reduce using rule 12 (factor -> ID .)
    @               reduce using rule 12 (factor -> ID .)
    $               reduce using rule 12 (factor -> ID .)
    ID              reduce using rule 12 (factor -> ID .)
    $end            reduce using rule 12 (factor -> ID .)
    )               reduce using rule 12 (factor -> ID .)


state 8

    (3) statement -> ID = expression .
    (4) expression -> expression . @ expression
    (5) expression -> expression . $ expression

    ID              reduce using rule 3 (statement -> ID = expression .)
    $end            reduce using rule 3 (statement -> ID = expression .)
    @               shift and go to state 14
    $               shift and go to state 15


state 9

    (10) factor -> ( . expression )
    (4) expression -> . expression @ expression
    (5) expression -> . expression $ expression
    (6) expression -> . term
    (7) term -> . term # factor
    (8) term -> . term & factor
    (9) term -> . factor
    (10) factor -> . ( expression )
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    (               shift and go to state 9
    FLOAT_LITERAL   shift and go to state 10
    ID              shift and go to state 7

    factor                         shift and go to state 11
    expression                     shift and go to state 16
    term                           shift and go to state 6

state 10

    (11) factor -> FLOAT_LITERAL .

    #               reduce using rule 11 (factor -> FLOAT_LITERAL .)
    &               reduce using rule 11 (factor -> FLOAT_LITERAL .)
    @               reduce using rule 11 (factor -> FLOAT_LITERAL .)
    $               reduce using rule 11 (factor -> FLOAT_LITERAL .)
    ID              reduce using rule 11 (factor -> FLOAT_LITERAL .)
    $end            reduce using rule 11 (factor -> FLOAT_LITERAL .)
    )               reduce using rule 11 (factor -> FLOAT_LITERAL .)


state 11

    (9) term -> factor .

    #               reduce using rule 9 (term -> factor .)
    &               reduce using rule 9 (term -> factor .)
    @               reduce using rule 9 (term -> factor .)
    $               reduce using rule 9 (term -> factor .)
    ID              reduce using rule 9 (term -> factor .)
    $end            reduce using rule 9 (term -> factor .)
    )               reduce using rule 9 (term -> factor .)


state 12

    (8) term -> term & . factor
    (10) factor -> . ( expression )
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    (               shift and go to state 9
    FLOAT_LITERAL   shift and go to state 10
    ID              shift and go to state 7

    factor                         shift and go to state 17

state 13

    (7) term -> term # . factor
    (10) factor -> . ( expression )
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    (               shift and go to state 9
    FLOAT_LITERAL   shift and go to state 10
    ID              shift and go to state 7

    factor                         shift and go to state 18

state 14

    (4) expression -> expression @ . expression
    (4) expression -> . expression @ expression
    (5) expression -> . expression $ expression
    (6) expression -> . term
    (7) term -> . term # factor
    (8) term -> . term & factor
    (9) term -> . factor
    (10) factor -> . ( expression )
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    (               shift and go to state 9
    FLOAT_LITERAL   shift and go to state 10
    ID              shift and go to state 7

    factor                         shift and go to state 11
    expression                     shift and go to state 19
    term                           shift and go to state 6

state 15

    (5) expression -> expression $ . expression
    (4) expression -> . expression @ expression
    (5) expression -> . expression $ expression
    (6) expression -> . term
    (7) term -> . term # factor
    (8) term -> . term & factor
    (9) term -> . factor
    (10) factor -> . ( expression )
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    (               shift and go to state 9
    FLOAT_LITERAL   shift and go to state 10
    ID              shift and go to state 7

    factor                         shift and go to state 11
    expression                     shift and go to state 20
    term                           shift and go to state 6

state 16

    (10) factor -> ( expression . )
    (4) expression -> expression . @ expression
    (5) expression -> expression . $ expression

    )               shift and go to state 21
    @               shift and go to state 14
    $               shift and go to state 15


state 17

    (8) term -> term & factor .

    #               reduce using rule 8 (term -> term & factor .)
    &               reduce using rule 8 (term -> term & factor .)
    @               reduce using rule 8 (term -> term & factor .)
    $               reduce using rule 8 (term -> term & factor .)
    ID              reduce using rule 8 (term -> term & factor .)
    $end            reduce using rule 8 (term -> term & factor .)
    )               reduce using rule 8 (term -> term & factor .)


state 18

    (7) term -> term # factor .

    #               reduce using rule 7 (term -> term # factor .)
    &               reduce using rule 7 (term -> term # factor .)
    @               reduce using rule 7 (term -> term # factor .)
    $               reduce using rule 7 (term -> term # factor .)
    ID              reduce using rule 7 (term -> term # factor .)
    $end            reduce using rule 7 (term -> term # factor .)
    )               reduce using rule 7 (term -> term # factor .)


state 19

    (4) expression -> expression @ expression .
    (4) expression -> expression . @ expression
    (5) expression -> expression . $ expression

    @               reduce using rule 4 (expression -> expression @ expression .)
    $               reduce using rule 4 (expression -> expression @ expression .)
    ID              reduce using rule 4 (expression -> expression @ expression .)
    $end            reduce using rule 4 (expression -> expression @ expression .)
    )               reduce using rule 4 (expression -> expression @ expression .)

  ! @               [ shift and go to state 14 ]
  ! $               [ shift and go to state 15 ]


state 20

    (5) expression -> expression $ expression .
    (4) expression -> expression . @ expression
    (5) expression -> expression . $ expression

    @               reduce using rule 5 (expression -> expression $ expression .)
    $               reduce using rule 5 (expression -> expression $ expression .)
    ID              reduce using rule 5 (expression -> expression $ expression .)
    $end            reduce using rule 5 (expression -> expression $ expression .)
    )               reduce using rule 5 (expression -> expression $ expression .)

  ! @               [ shift and go to state 14 ]
  ! $               [ shift and go to state 15 ]


state 21

    (10) factor -> ( expression ) .

    #               reduce using rule 10 (factor -> ( expression ) .)
    &               reduce using rule 10 (factor -> ( expression ) .)
    @               reduce using rule 10 (factor -> ( expression ) .)
    $               reduce using rule 10 (factor -> ( expression ) .)
    ID              reduce using rule 10 (factor -> ( expression ) .)
    $end            reduce using rule 10 (factor -> ( expression ) .)
    )               reduce using rule 10 (factor -> ( expression ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 5 resolved as shift
